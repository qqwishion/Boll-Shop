from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from bool_shop.db import add_order_proof, get_user_orders, get_slot, update_order_status
from bool_shop.bot_token import ADMINS
import bool_shop.keyboards as kb

router = Router()


class OrderFSM(StatesGroup):
    waiting_for_size = State()
    waiting_for_proof = State()
    waiting_for_delivery = State()
    waiting_for_address = State()

# ================= START CHECKOUT =================
@router.callback_query(F.data.startswith("checkout:"))
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    slot_id = int(callback.data.split(":")[1])
    slot = await get_slot(slot_id)

    if not slot:
        return await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.update_data(
        slot_id=slot_id,
        slot_name=slot["name"],
        slot_price=slot["price"]
    )

    sizes = slot["size"].split(",") if slot["size"] else ["–°—Ç–∞–Ω–¥–∞—Ä—Ç"]
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:", reply_markup=kb.size_keyboard(slot_id, sizes))
    await state.set_state(OrderFSM.waiting_for_size)
    return None


# ================= RECEIVE PAYMENT =================
@router.message(F.photo, OrderFSM.waiting_for_proof)
async def receive_payment(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data["order_id"]
    file_id = message.photo[-1].file_id
    await add_order_proof(order_id, file_id)
    slot_id = data["slot_id"]
    size = data["size"]
    from bool_shop.db import get_slot
    slot = await get_slot(slot_id)

    product_name = slot["name"]
    product_price = slot["price"]
    for admin_id in ADMINS:
        try:
            await message.bot.send_photo(
                chat_id=admin_id,
                photo=file_id,
                caption=(
                    f"–ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂!\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or '‚Äî'}\n"
                    f"Telegram ID: <code>{message.from_user.id}</code>\n\n"
                    f"–ó–∞–∫–∞–∑ #{order_id}\n"
                    f"–¢–æ–≤–∞—Ä: {product_name}\n"
                    f"–†–∞–∑–º–µ—Ä: {size}\n"
                    f"–¶–µ–Ω–∞: {product_price}‚ÇΩ"
                ),
                reply_markup=kb.payment_approval_kb(order_id)
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        try:
            await message.delete()
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    await message.answer("‚úÖ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
    await state.clear()



# ================= –ü–û–°–õ–ï –ê–î–ú–ò–ù–°–ö–û–ì–û –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø =================
async def continue_after_payment(user_id: int, order_id: int, bot):
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω—Å–∫–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    await update_order_status(order_id, "paid")
    await bot.send_message(
        user_id,
        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\nüöö –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è:",
        reply_markup=kb.delivery_keyboard
    )


# ================= MY ORDERS =================
@router.message(F.text == "/myorders")
async def my_orders(message: Message):
    orders = await get_user_orders(message.from_user.id)
    if not orders:
        return await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")

    STATUS_LABELS = {
        "pending": "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏",
        "paid": "‚úÖ –û–ø–ª–∞—á–µ–Ω",
        "processing": "‚öôÔ∏è –í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
        "shipped": "üöö –î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è",
        "completed": "üëå –í—ã–ø–æ–ª–Ω–µ–Ω",
        "rejected": "‚ùå –û—Ç–º–µ–Ω—ë–Ω"

    }

    text = "üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
    for order in orders:
        order_id, slot_id, size, address, status = order
        text += (
            f"üÜî –ó–∞–∫–∞–∑ #{order_id}\n"     
            f"üìå –†–∞–∑–º–µ—Ä: {size or '-'}\n"
            f"üìç –ê–¥—Ä–µ—Å: {address or '-'}\n"
            f"üì¶ –°—Ç–∞—Ç—É—Å: {STATUS_LABELS.get(status, status)}\n\n"
        )

    await message.answer(text)
    return None
