import asyncio
import logging
import aiosqlite
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart, CommandObject

import bool_shop.keyboards as kb
from bool_shop.db import get_slot, add_user, create_order, get_order_user, update_order_status, \
    DB_NAME, update_order_address, get_order, update_slot, decrement_slots, \
    get_users_with_orders, get_buyers
from bool_shop.states import OrderFSM
from bool_shop.bot_token import ADMINS

router = Router()
logger = logging.getLogger(__name__)



async def send_start_message(message: Message):
    await message.answer_photo(
        photo="AgACAgIAAxkBAAMLaNuXTNnP-er9DY8Q7WWscxIduh4AAnEJMhvYe9lK9avgKekeP-wBAAMCAAN5AAM2BA",
        caption="–ü—Ä–∏–≤–µ—Ç! —Ä–∞–¥—ã, —á—Ç–æ –≤—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∏–º–µ–Ω–Ω–æ –∫ Boll Shop.\n"
                "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üë®‚Äçüíª",
        reply_markup=kb.start_reply_kb
    )

async def send_about_message(message: Message):
    await message.answer_photo(
        photo="AgACAgIAAxkBAAMLaNuXTNnP-er9DY8Q7WWscxIduh4AAnEJMhvYe9lK9avgKekeP-wBAAMCAAN5AAM2BA",
        caption=f"–ü—Ä–∏–≤–µ—Ç {message.from_user.username}! –í –±–æ—Ç–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–∫—É–ø–∞—Ç—å –∏–ª–∏ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–¥–µ–∂–¥—É"
                f"–∏ –Ω–µ —Ç–æ–ª—å–∫–æ."
                f"\n–í—Å–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã\n"
                f"/help - –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n/myorders - —Ç—É—Ç –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤—Å–µ —Ç–≤–æ–∏ –∑–∞–∫–∞–∑—ã\n\n"
                f"–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @BollShop",
        reply_markup=kb.inline_back_kb
    )





@router.message(CommandStart())
async def cmd_start(message: Message, command: CommandObject):
    await add_user(message.from_user)

    if command.args:
        try:
            slot_id = int(command.args)
            slot = await get_slot(slot_id)
            if slot:
                text = (
                    f"üõí     –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä:\n\n"
                    f"{slot['name']}\n"
                    f"–†–∞–∑–º–µ—Ä: {slot['size']}\n"
                    f"–¶–µ–Ω–∞: {slot['price']}‚ÇΩ"
                )
                await message.answer_photo(photo=slot["png"],
                                           caption=text, parse_mode="HTML",
                                           reply_markup=kb.checkout_button(slot_id)
                                           )
                return
            else:
                await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except ValueError:
            await message.answer("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞.")
    else:
        await send_start_message(message)

@router.callback_query(F.data.startswith("checkout:"))
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    slot_id = int(callback.data.split(":")[1])
    slot = await get_slot(slot_id)

    if not slot:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await state.update_data(slot_id=slot_id)

    sizes = slot["size"].split(",") if slot["size"] else ["‚Äî"]

    await state.set_state(OrderFSM.waiting_for_size)
    await callback.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: {slot['name']}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:",
        reply_markup=kb.size_keyboard(slot_id, sizes)
    )
    await callback.answer()

@router.callback_query(OrderFSM.waiting_for_size, F.data.startswith("size:"))
async def choose_size(callback: CallbackQuery, state: FSMContext):
    _, slot_id, size = callback.data.split(":")
    slot_id = int(slot_id)

    order_id = await create_order(
        user_id=callback.from_user.id,
        username=callback.from_user.username,
        slot_id=slot_id,
        size=size
    )

    await state.update_data(order_id=order_id, size=size, slot_id=slot_id)

    await callback.message.answer(
        f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —Å–æ–∑–¥–∞–Ω!\n\n"
        f"üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É 2200 1539 9409 0240\n"
        f"–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω —á–µ–∫–∞ üì∏"
    )
    await state.set_state(OrderFSM.waiting_for_proof)
    await callback.answer()






@router.message(Command("help"))
async def cmd_help(message: Message):
    await send_about_message(message)




@router.message(F.text.in_(["üõí–ú–µ–Ω—é", "–º–µ–Ω—é", "–ú–µ–Ω—é"]))
async def menu(message: Message):
    await message.answer_photo(
        photo="AgACAgIAAxkBAAMLaNuXTNnP-er9DY8Q7WWscxIduh4AAnEJMhvYe9lK9avgKekeP-wBAAMCAAN5AAM2BA",
        caption="‚¨áÔ∏è –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ ‚¨áÔ∏è",
        reply_markup=kb.inline_kb
    )

@router.message(F.text.in_(["‚òéÔ∏è–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"]))
async def support(message: Message):
    await message.answer(
        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 9:00 –¥–æ 21:00 –ø–æ –ú–°–ö.\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n      @BollShop",
        reply_markup=kb.inline_back_kb
    )

@router.message(F.text.in_(["üìÇ–ö–∞–Ω–∞–ª—ã", "–∫–∞–Ω–∞–ª—ã", "–ö–∞–Ω–∞–ª—ã"]))
async def channels(message: Message):
    await message.answer_photo(
        photo="AgACAgIAAxkBAAMLaNuXTNnP-er9DY8Q7WWscxIduh4AAnEJMhvYe9lK9avgKekeP-wBAAMCAAN5AAM2BA",
        caption="–≤–æ—Ç –≤—Å–µ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:",
        reply_markup=kb.inline_channels_kb
    )

@router.callback_query(F.data.startswith("approve_payment:"))
async def approve_payment(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split(":")[1])

    await update_order_status(order_id, "paid")

    user_id, slot_name = await get_order_user(order_id)
    await callback.message.delete()

    await callback.bot.send_message(
        user_id,
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞ {slot_name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è:",
        reply_markup=kb.delivery_keyboard(order_id)
    )

    await state.update_data(order_id=order_id)
    await state.set_state(OrderFSM.waiting_for_delivery)

    await callback.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ")

@router.callback_query(F.data.startswith("reject_payment:"))
async def reject_payment(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])

    user_id, slot_name = await get_order_user(order_id)

    await update_order_status(order_id, "rejected")

    await callback.message.delete()

    await callback.bot.send_message(
        user_id,
        f"‚ùå –ß–µ–∫ –∑–∞ {slot_name} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.\n"
        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - @BollShop."
    )

    await callback.answer("–û—Ç–º–µ—Ç–∏–ª –∫–∞–∫ ‚ùå –Ω–µ –ø—Ä–∏—à–ª–æ")


@router.callback_query(F.data.startswith("delivery:"))
async def process_delivery(callback: CallbackQuery, state: FSMContext):
    method, order_id = callback.data.split(":")[1:]
    order_id = int(order_id)

    order = await get_order(order_id)
    if not order:
        return await callback.answer("‚ö† –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

    await state.update_data(order_id=order_id)

    if method == "courier":
        async with aiosqlite.connect(DB_NAME) as db:
            await db.execute(
                "UPDATE orders SET delivery = ? WHERE id = ?",
                ("–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ú–°–ö", order_id)
            )
            await db.commit()

        await state.set_state(OrderFSM.waiting_for_address)
        await callback.message.answer("üöö –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –ú–æ—Å–∫–≤–µ:")
        await callback.message.delete()
        return None

    elif method == "avito":
        delivery = "–ê–≤–∏—Ç–æ –¥–æ—Å—Ç–∞–≤–∫–∞"
        text_user = (
            "üì¶ –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ê–≤–∏—Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–æ—Ç –∂–µ —á–µ–∫ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
            "üëâ https://www.avito.ru/moskva/odezhda_obuv_aksessuary/veschi_s_tgk_7652463600?utm_campaign="
            "native&utm_medium=item_page_android&utm_source=soc_sharing_seller"
        )
    elif method == "pickup":
        delivery = "–°–∞–º–æ–≤—ã–≤–æ–∑"
        text_user = (
            "üè¨ –°–∞–º–æ–≤—ã–≤–æ–∑ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:\n–ú–æ—Å–∫–≤–∞, –º–µ—Ç—Ä–æ –ù–æ–≤–æ–∫–æ—Å–∏–Ω–æ\n\n"
            "üì≤ –î–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @BollShop."
        )
    else:
        return await callback.answer("‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏", show_alert=True)

    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute(
            "UPDATE orders SET delivery = ?, status = ? WHERE id = ?",
            (delivery, "processing", order_id)
        )
        await db.commit()

        await asyncio.sleep(0.1)
        order = await get_order(order_id)

        await update_order_status(order_id, "processing")
        await remove_size_and_update_channel(callback.bot, order)

        await db.commit()

    await callback.message.delete()
    await callback.message.answer(text_user)

    for admin_id in ADMINS:
        await callback.bot.send_message(
            admin_id,
            f"üì¶ –ó–∞–∫–∞–∑ #{order['id']}\n"
            f"@{order['username']} (id: {order['user_id']})\n"
            f"{order['slot_name']} ‚Äî {order['size']}\n"
            f"–°–ø–æ—Å–æ–±: {delivery}\n"
            f"–ê–¥—Ä–µ—Å: {order.get('address', '‚Äî')}\n"
            f"{order['price']}‚ÇΩ\n\n"
            f"–°—Ç–∞—Ç—É—Å: processing",
            reply_markup=kb.admin_confirm_kb(order_id)
        )

    await callback.answer()
    return None


@router.message(OrderFSM.waiting_for_address)
async def save_address(message: Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("order_id")
    address = message.text
    order = await get_order(order_id)

    await update_order_address(order_id, address)
    await update_order_status(order_id, "processing")
    await remove_size_and_update_channel(message.bot, order)

    order = await get_order(order_id)

    await message.answer("‚úÖ –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    await state.clear()
    try:
        await message.delete()
    except:
        pass

    order = await get_order(order_id)

    slot = await get_slot(order['slot_id'])
    if slot and slot.get('size'):
        sizes = slot['size'].split(",")
        if order['size'] in sizes:
            sizes.remove(order['size'])
            new_sizes = ",".join(sizes)
            await update_slot(order['slot_id'], "size", new_sizes)

    for admin_id in ADMINS:
        await message.bot.send_message(
            admin_id,
            f"üì¶ –ó–∞–∫–∞–∑ #{order['id']}\n"
            f"@{order['username']} (id: {order['user_id']})\n"
            f"{order['slot_name']} ‚Äî {order['size']}\n"
            f"–°–ø–æ—Å–æ–±: {order['delivery']}\n"
            f"–ê–¥—Ä–µ—Å: {address}\n"
            f"{order['price']}‚ÇΩ\n\n"
            f"–°—Ç–∞—Ç—É—Å: processing",
            reply_markup=kb.admin_confirm_kb(order_id)
        )


@router.message(F.from_user.id.in_(ADMINS), F.text.regexp(r"^/order(\s+\d+)?$"))
async def cmd_order(message: Message):
    try:
        order_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.answer("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π: /order <id>")
        return

    order = await get_order(order_id)
    if not order:
        await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    text = (
        f"–ó–∞–∫–∞–∑ #{order['id']}\n\n"
        f"@{order['username']} (id: {order['user_id']})\n"
        f"{order['slot_name']} ‚Äî {order['size']}\n"
        f"{order['price']}‚ÇΩ\n"
        f"{order.get('delivery', '‚Äî')}\n"
        f"{order.get('address', '‚Äî')}\n\n"
        f"–°—Ç–∞—Ç—É—Å: {order['status']}"
    )

    await message.answer(text, reply_markup=kb.order_manage_kb(order_id))




async def remove_size_and_update_channel(bot, order):
    slot = await get_slot(order['slot_id'])
    if not slot or not slot.get("size"):
        return

    sizes = [s.strip() for s in slot["size"].split(",")]
    selected_size = str(order["size"]).strip()

    if selected_size in sizes:
        sizes.remove(selected_size)
        new_sizes = ",".join(sizes)

        await update_slot(order["slot_id"], "size", new_sizes)

        if slot.get("channel_id") and slot.get("message_id"):
            caption = (
                f"{slot['name']}\n"
                f"–†–∞–∑–º–µ—Ä—ã: {new_sizes if new_sizes else '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}\n"
                f"–¶–µ–Ω–∞: {slot['price']}‚ÇΩ\n"
                f"{slot['description']}\n\n"
                f"üëâ –ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å!"
            )
            try:
                await bot.edit_message_caption(
                    chat_id=slot["channel_id"],
                    message_id=slot["message_id"],
                    caption=caption,
                    reply_markup=kb.product_button(slot["id"])
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ –≤ –¢–ì–ö: {e}")


@router.callback_query(F.data.startswith("admin_confirm:"))
async def admin_confirm(callback: CallbackQuery):
    order_id = int(callback.data.split(":")[1])
    await update_order_status(order_id, "shipped")
    await callback.answer("‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å shipped")
    await callback.message.edit_reply_markup()


@router.callback_query(F.data.startswith("admin_reject:"))
async def admin_reject(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMINS:
        return await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    order_id = int(callback.data.split(":")[1])

    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute(
            "UPDATE orders SET delivery = NULL, address = NULL, status = 'declined' WHERE id = ?",
            (order_id,)
        )
        await db.commit()

    order = await get_order(order_id)
    if order and order.get("user_id"):
        try:
            await callback.bot.send_message(
                order["user_id"],
                f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
                f"–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É - @BollShop."
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {order['user_id']}: {e}")

    try:
        await state.clear()
    except:
        pass

    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω")
    return None


@router.callback_query(F.data.startswith("order_complete:"))
async def order_complete(callback: CallbackQuery):
    if callback.from_user.id not in ADMINS:
        return await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    try:
        order_id = int(callback.data.split(":")[1])
    except Exception:
        return await callback.answer("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)

    await update_order_status(order_id, "completed")

    order = await get_order(order_id)
    if not order:
        return await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    if order:
        await decrement_slots(order['user_id'])

    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("UPDATE users SET buyer = 1 WHERE tg_id = ?", (order['user_id'],))
        await db.commit()

    await callback.message.edit_reply_markup(reply_markup=None)

    await callback.message.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω")

    try:
        await callback.bot.send_message(
            order["user_id"],
            f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π."
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {order['user_id']}: {e}")

    await callback.answer()
    return None


@router.callback_query(F.data.startswith("order_decline:"))
async def order_decline(callback: CallbackQuery):
    if callback.from_user.id not in ADMINS:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    try:
        order_id = int(callback.data.split(":")[1])
    except Exception as e:
        logger.exception("Bad callback data for order_decline: %s", callback.data)
        await callback.answer("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    try:
        await update_order_status(order_id, "rejected")
    except Exception as e:
        logger.exception("Failed to update order status to rejected for %s", order_id)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
        return

    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logger.exception("Can't edit reply markup for callback message: %s", e)

    await callback.answer("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω")

    try:
        order = await get_order(order_id)
        if order and order.get("user_id"):
            await callback.bot.send_message(order["user_id"], f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
    except Exception as e:
        logger.exception("Failed to notify user about declined order: %s", e)

@router.message(Command("check_buyer"))
async def check_buyer(message: Message):
    if message.from_user.id not in ADMINS:
        return await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    buyers = await get_buyers()
    if not buyers:
        return await message.answer("üì≠ –ù–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.")

    text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π:\n\n"
    for user in buyers:
        text += (
            f"üÜî {user['tg_id']} | @{user['username'] or '‚Äî'}\n"
            f"üì¶ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ—Ç—ã: {user['active_slots']}\n\n"
        )

    await message.answer(text)
    return None


@router.message(Command("check"))
async def check_users(message: Message):
    if message.from_user.id not in ADMINS:
        return await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    users = await get_users_with_orders()
    if not users:
        return await message.answer("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")

    text = "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for u in users:
        text += (
            f"üÜî {u['tg_id']} | @{u['username'] or '‚Äî'}\n"
            f"üëë –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {'‚úÖ' if u['buyer'] else '‚ùå'}\n"
            f"üì¶ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ª–æ—Ç—ã: {u['active_slots']}\n\n"
        )

    await message.answer(text)
    return None


@router.callback_query()
async def handle_callback(callback: CallbackQuery):
    if callback.data == "catalog":
        await callback.message.answer("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ üì¶ –ö–∞—Ç–∞–ª–æ–≥ ‚úÖ")
    elif callback.data == "back":
        await send_start_message(callback.message)
    elif callback.data == "about":
        await send_about_message(callback.message)

    await callback.answer()

